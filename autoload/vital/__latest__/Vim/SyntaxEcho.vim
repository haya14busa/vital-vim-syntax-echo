"=============================================================================
" FILE: autoload/vital/__latest__/Vim/SyntaxEcho.vim
" AUTHOR: haya14busa
" License: MIT license
"=============================================================================
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim

function! s:_vital_loaded(V) abort
  let s:String = a:V.import('Data.String')
  let s:Set = a:V.import('Data.Set')
  call s:_setup()
endfunction

function! s:_vital_depends() abort
  return [
  \   'Data.String',
  \   'Data.Set',
  \ ]
endfunction

let s:TRUE = !0
let s:FALSE = 0

function! s:echon(string) abort
  let [bodies, comment] = s:_parse_comment(a:string)
  let is_statement = s:TRUE
  for body in bodies
    if has_key(body, 'quote')
      call s:_echon('String', body.quote)
    else
      call s:_echo_body(body.plain, is_statement)
    endif
    let is_statement = s:FALSE
  endfor
  call s:_echon('Comment', comment)
endfunction

function! s:echo(string) abort
  echo ''
  call s:echon(a:string)
endfunction

function! s:_test_syntax_echon() abort
  echo '' | call s:echon('" comment')
  echo '' | call s:echon('function! s:_parse_comment(string) abort')
  echo '' | call s:echon('let [body, comment] = s:_parse_comment(a:string)')
  echo '' | call s:echon('  let is_statement = s:TRUE " comment')
  echo '' | call s:echon("call s:Message.echon('Identifier', token)")
  echo '' | call s:echon("let cmd = matchstr(token, '^.\{-}\ze\(!\s*\)\=')")
  echo '' | call s:echon('let start_d_idx = -1')
endfunction

function! s:_echon(hl, msg) abort
  execute 'echohl' a:hl
  try
    echon a:msg
  finally
    echohl None
  endtry
endfunction

function! s:_echo_body(body, is_statement) abort
  let is_statement = a:is_statement
  for token in s:split_to_token(a:body)
    if token =~# '^\s\+$'
      echon token
    elseif is_statement && token =~# '\\\s*'
      call s:_echon('Special', token)
      let is_statement = s:FALSE
    elseif is_statement && token =~# '^\s*:\s*'
      echon token
    elseif is_statement
      let cmd = matchstr(token, '^\l\+\ze\(!\)\=\s*')
      if s:command_set.in(cmd)
        if token =~# '!\s*$'
          let sp = split(token, '!\ze\s*$')
          let cmd = get(sp, 0, '')
          let spaces = get(sp, 1, '')
          call s:_echon('Statement', cmd)
          call s:_echon('vimFunction', '!')
          echon spaces
        else
          call s:_echon('Statement', token)
        endif
      else
        echon token
      endif
      let is_statement = s:FALSE
    else
      if token =~# '^[gasbwt]:\k\+\s*$'
        call s:_echon('Identifier', token)
      elseif s:_is_vim_operator(s:String.trim(token))
        call s:_echon('Operator', token)
      elseif s:_is_vim_func(token)
        let [funcname, rest] = split(token, '^\k\+\zs\ze(')
        call s:_echon('Function', funcname)
        echon rest
      elseif token =~# '|\s*$'
        echon token
        let is_statement = s:TRUE
      elseif token =~# '^\d\+$'
        call s:_echon('Number', token)
      elseif token =~# '^<[^ >]\+>[^>]\{-}$'
        let sp = split(token, '^<[^ >]\+>\zs\ze[^>]\{-}$')
        let map = get(sp, 0, '')
        let after = get(sp, 1, '')
        call s:_echon('Delimiter', '<')
        call s:_echon('Special', map[1:-2])
        call s:_echon('Delimiter', '>')
        echon after
      else
        echon token
      endif
    endif
  endfor
endfunction

function! s:split_to_token(string) abort
  return split(a:string,
  \ '\[\s*\|[+-]\zs\ze\d\|\zs\ze<[^ ]\+>\|\(^\s*:\s*\|\s\+\|\d\+\|\k\+(\)\zs\|-\zs\ze\d\+')
endfunction

function! s:_is_vim_operator(token) abort
  return a:token =~# '^\(==\|!=\|>=\|<=\|=\~\|!\~\|>\|<\|=\)[?#]\{0,2}$' ||
  \   a:token =~# '^\(||\|&&\|[-+.]\)$'
endfunction

function! s:_is_vim_func(token) abort
  let funcname = matchstr(a:token, '^\k\+\ze(')
  return funcname isnot# '' && s:funcnames.in(funcname)
endfunction

" @return [bodies, comment]
function! s:_parse_comment(string) abort
  let quote_idx_pair = []
  if a:string =~# '^\s*"'
    return [s:_body('', quote_idx_pair), a:string]
  endif

  " is in single quote
  let is_in_s = s:FALSE
  " is in double quote
  let is_in_d = s:FALSE
  " is now escape state
  let is_escape = s:FALSE
  " the index of start of douple quote
  let start_d_idx = -1
  " the index of start of single quote
  let start_s_idx = -1
  let idx = 0
  for c in map(range(len(a:string)), 'a:string[v:val]')
    if c is# '"' && !(is_in_d && is_escape) && !is_in_s
      if is_in_d
        " close "
        let is_in_d = s:FALSE
        let quote_idx_pair += [[start_d_idx, idx]]
        let start_d_idx = -1
      else
        " start "
        let is_in_d = s:TRUE
        let start_d_idx = idx
      endif
    elseif c is# "'" && !is_in_d
      if is_in_s
        let quote_idx_pair += [[start_s_idx, idx]]
        let start_s_idx = -1
      else
        let start_s_idx = idx
      endif
      let is_in_s = !is_in_s
    endif

    if c is# '\' && is_in_d
      let is_escape = !is_escape
    else
      let is_escape = s:FALSE
    endif

    let idx += 1
  endfor
  if start_d_idx is# -1
    return [s:_body(a:string, quote_idx_pair), '']
  else
    if start_d_idx is# 0
      return [s:_body('', quote_idx_pair), a:string[start_d_idx :]]
    else
      return [s:_body(a:string[: start_d_idx - 1], quote_idx_pair), a:string[start_d_idx :]]
    endif
  endif
endfunction

function! s:_body(body, quote_idx_pair) abort
  let bodies = []
  let idx = 0
  for pair in a:quote_idx_pair
    let [start, end] = pair
    let bodies += [{'plain': a:body[idx : start - 1]}]
    let bodies += [{'quote': a:body[start : end]}]
    let idx = end + 1
  endfor
  let bodies += [{'plain': a:body[idx :]}]
  return bodies
endfunction

let s:commands = [
\ 'a', 'arga[dd]', 'argl[ocal]', 'ba[ll]', 'bn[ext]', 'breakd[el]', 'bufdo', 'cabc[lear]', 'cat[ch]', 'ce[nter]', 'cgetb[uffer]', 'che[ckpath]', 'cmapc[lear]', 'cnf', 'com', 'cope[n]', 'cs', 'de', 'delep', 'delf', 'di', 'difft[his]', 'dj[ump]', 'dr[op]', 'ec', 'elsei[f]', 'endf[unction]', 'exi[t]', 'filetype', 'fix[del]', 'for', 'gr[ep]', 'h[elp]', 'hid[e]', 'ij[ump]', 'isp[lit]', 'keepalt', 'lad', 'la[st]', 'lcl[ose]', 'lex[pr]', 'lgete[xpr]', 'll', 'lne', 'lnf[ile]', 'loc[kmarks]', 'lr[ewind]', 'lv[imgrep]', 'marks', 'mk', 'mkv[imrc]', 'mz[scheme]', 'new', 'noswap[file]', 'o[pen]', 'ped[it]', 'pp[op]', 'profd[el]', 'ptf[irst]', 'ptN[ext]', 'py', 'python3', 're', 'redr[aw]', 'rew[ind]', 'rubyf[ile]', 'sa[rgument]', 'sbn[ext]', 'scripte[ncoding]', 'setf[iletype]', 'sh[ell]', 'sim[alt]', 'sm[ap]', 'sni[ff]', 'sor[t]', 'spelli[nfo]', 'spr[evious]', 'start', 'st[op]', 'sunmenu', 'syn', 'ta', 'tabf[ind]', 'tabnew', 'tabr[ewind]', 'tcld[o]', 'tj[ump]', 'tN', 'tr', 'tu[nmenu]', 'undoj[oin]', 'uns[ilent]', 've[rsion]', 'vimgrepa[dd]', 'vs[plit]', 'winc[md]', 'wN[ext]', 'ws[verb]', 'x[it]', 'xnoremenu',
\ 'ab', 'argd', 'ar[gs]', 'bd[elete]', 'bN[ext]', 'breakl[ist]', 'b[uffer]', 'cad', 'cb[uffer]', 'cex[pr]', 'cgete[xpr]', 'checkt[ime]', 'cn', 'cNf', 'comc[lear]', 'co[py]', 'cscope', 'debug', 'd[elete]', 'delf[unction]', 'diffg[et]', 'diffu[pdate]', 'dl', 'ds[earch]', 'echoe[rr]', 'em[enu]', 'en[dif]', 'exu[sage]', 'fin', 'fo[ld]', 'fu', 'grepa[dd]', 'helpc[lose]', 'his[tory]', 'il[ist]', 'iuna[bbrev]', 'keepj[umps]', 'laddb[uffer]', 'lat', 'lcs', 'lf', 'lg[etfile]', 'lla[st]', 'lnew[er]', 'lNf[ile]', 'lockv[ar]', 'ls', 'lvimgrepa[dd]', 'mat[ch]', 'mk[exrc]', 'mo', 'n', 'n[ext]', 'nu[mber]', 'opt[ions]', 'pe[rl]', 'pr', 'prof[ile]', 'ptj[ump]', 'ptp[revious]', 'py3', 'q', 'r[ead]', 'redraws[tatus]', 'ri[ght]', 'rundo', 'sav[eas]', 'sbN[ext]', 'scrip[tnames]', 'setg[lobal]', 'si', 'sl', 'sme', 'sno[magic]', 'so[urce]', 'spellr[epall]', 'sre[wind]', 'startg[replace]', 'stopi[nsert]', 'sus[pend]', 'sync', 'tab', 'tabfir[st]', 'tabn[ext]', 'tabs', 'tclf[ile]', 'tl[ast]', 'tn[ext]', 'tr[ewind]', 'u', 'undol[ist]', 'up[date]', 'vert[ical]', 'vi[sual]', 'w', 'windo', 'wp[revious]', 'wundo', 'xmapc[lear]', 'xunme',
\ 'abc[lear]', 'argd[elete]', 'argu[ment]', 'bel[owright]', 'bo[tright]', 'br[ewind]', 'buffers', 'caddb[uffer]', 'cc', 'cf', 'cg[etfile]', 'cl', 'cN', 'cnf[ile]', 'comp[iler]', 'cpf[ile]', 'cstag', 'debugg[reedy]', 'deletel', 'dell', 'diffo[ff]', 'dig', 'dli[st]', 'dsp[lit]', 'echom[sg]', 'en', 'endt[ry]', 'f', 'fina[lly]', 'foldc[lose]', 'fun', 'gui', 'helpf[ind]', 'i', 'imapc[lear]', 'j[oin]', 'kee[pmarks]', 'lad[dexpr]', 'later', 'lcscope', 'lfdo', 'lgr[ep]', 'lli[st]', 'lne[xt]', 'lo', 'lol[der]', 'lt[ag]', 'lw[indow]', 'menut', 'mks[ession]', 'mod[e]', 'nbc[lose]', 'nmapc[lear]', 'o', 'ownsyntax', 'perld[o]', 'pre[serve]', 'promptf[ind]', 'ptl[ast]', 'ptr[ewind]', 'py3do', 'qa[ll]', 'rec[over]', 'reg[isters]', 'rightb[elow]', 'ru[ntime]', 'sba[ll]', 'sbp[revious]', 'scs', 'setl[ocal]', 'sig', 'sla[st]', 'smenu', 'snoreme', 'spe', 'spellu[ndo]', 'st', 'star[tinsert]', 'sts[elect]', 'sv[iew]', 'syncbind', 'tabc[lose]', 'tabl[ast]', 'tabN[ext]', 'ta[g]', 'te[aroff]', 'tm', 'tN[ext]', 'try', 'un', 'unh[ide]', 'v', 'vi', 'viu[sage]', 'wa[ll]', 'winp[os]', 'wq', 'wv[iminfo]', 'xme', 'xunmenu',
\ 'abo[veleft]', 'argdo', 'as[cii]', 'bf[irst]', 'bp[revious]', 'bro[wse]', 'bun[load]', 'cad[dexpr]', 'ccl[ose]', 'cfdo', 'c[hange]', 'cla[st]', 'cnew[er]', 'cNf[ile]', 'con', 'cp[revious]', 'cuna[bbrev]', 'del', 'deletep', 'delm[arks]', 'diffp[atch]', 'dig[raphs]', 'do', 'e', 'echon', 'endf', 'endw[hile]', 'f[ile]', 'fin[d]', 'folddoc[losed]', 'fu[nction]', 'gvim', 'helpg[rep]', 'ia', 'in', 'ju[mps]', 'keepp[atterns]', 'laddf[ile]', 'lb[uffer]', 'ld[o]', 'lf[ile]', 'lgrepa[dd]', 'lmak[e]', 'lN[ext]', 'loadk', 'lop[en]', 'lua', 'ma', 'menut[ranslate]', 'mksp[ell]', 'm[ove]', 'nb[key]', 'noa', 'ol[dfiles]', 'p', 'po[p]', 'prev[ious]', 'promptr[epl]', 'ptn', 'pts[elect]', 'pydo', 'q[uit]', 'red', 'res[ize]', 'ru', 'rv[iminfo]', 'sbf[irst]', 'sbr[ewind]', 'scscope', 'sf[ind]', 'sign', 'sl[eep]', 'sn[ext]', 'snoremenu', 'spelld[ump]', 'spellw[rong]', 'sta[g]', 'startr[eplace]', 'sun[hide]', 'sw[apname]', 'syntime', 'tabd[o]', 'tabm[ove]', 'tabo[nly]', 'tags', 'tf[irst]', 'tm[enu]', 'to[pleft]', 'ts[elect]', 'una[bbreviate]', 'unl', 've', 'vie[w]', 'vmapc[lear]', 'wh[ile]', 'win[size]', 'wqa[ll]', 'x', 'xmenu', 'xwininfo',
\ 'al[l]', 'arge[dit]', 'au', 'bl[ast]', 'brea[k]', 'bu', 'bw[ipeout]', 'caddf[ile]', 'cd', 'cf[ile]', 'changes', 'cl[ist]', 'cn[ext]', 'col[der]', 'conf[irm]', 'cq[uit]', 'cw[indow]', 'delc[ommand]', 'deletl', 'delp', 'diffpu[t]', 'dir', 'doau', 'ea', 'e[dit]', 'endfo[r]', 'ene[w]', 'files', 'fini[sh]', 'foldd[oopen]', 'g', 'h', 'helpt[ags]', 'iabc[lear]', 'intro', 'k', 'l', 'lan', 'lc[d]', 'le[ft]', 'lfir[st]', 'lh[elpgrep]', 'lmapc[lear]', 'lnf', 'loadkeymap', 'lpf[ile]', 'luado', 'mak[e]', 'mes', 'mkv', 'mz', 'nbs[tart]', 'noautocmd', 'omapc[lear]', 'pc[lose]', 'popu', 'p[rint]', 'ps[earch]', 'ptN', 'pu[t]', 'pyf[ile]', 'quita[ll]', 'redi[r]', 'ret[ab]', 'rub[y]', 'sal[l]', 'sbl[ast]', 'sb[uffer]', 'se[t]', 'sfir[st]', 'sil[ent]', 'sm[agic]', 'sN[ext]', 'so', 'spe[llgood]', 'sp[lit]', 'star', 'stj[ump]', 'sunme', 'sy', 't', 'tabe[dit]', 'tabN', 'tabp[revious]', 'tc[l]', 'th[row]', 'tn', 'tp[revious]', 'tu', 'u[ndo]', 'unlo[ckvar]', 'verb[ose]', 'vim[grep]', 'vne[w]', 'win', 'wn[ext]', 'w[rite]', 'xa[ll]', 'xnoreme', 'y[ank]',
\ 'ar', 'argg[lobal]', 'bad[d]', 'bm[odified]', 'breaka[dd]', 'buf', 'c', 'cal[l]', 'cdo', 'cfir[st]', 'chd[ir]', 'clo[se]', 'cN[ext]', 'colo[rscheme]', 'con[tinue]', 'cr[ewind]', 'd', 'delel', 'deletp', 'dep', 'diffs[plit]', 'di[splay]', 'dp', 'earlier', 'el[se]', 'endfun', 'ex', 'filet', 'fir[st]', 'foldo[pen]', 'go[to]', 'ha[rdcopy]', 'hi', 'if', 'is[earch]', 'keepa', 'la', 'lan[guage]', 'lch[dir]', 'lefta[bove]', 'lgetb[uffer]', 'l[ist]', 'lN', 'lNf', 'lo[adview]', 'lp[revious]', 'luafile', 'ma[rk]', 'messages', 'mkvie[w]', 'mzf[ile]', 'ne', 'noh[lsearch]', 'on[ly]', 'pe', 'popu[p]', 'pro', 'pta[g]', 'ptn[ext]', 'pw[d]', 'py[thon]', 'r', 'red[o]', 'retu[rn]', 'rubyd[o]', 'san[dbox]', 'sbm[odified]', 'scrip',
\ 'let', 'unl[et]',
\ 'aug[roup]', 'au[tocmd]', 'do[autocmd]', 'doautoa[ll]',
\ 'ec[ho]', 'echoh[l]', 'exe[cute]',
\ 'map',
\ 'cm[ap]', 'cno[remap]', 'im[ap]', 'ino[remap]', 'lm[ap]', 'ln[oremap]', 'nm[ap]', 'nn[oremap]', 'no[remap]', 'om[ap]', 'ono[remap]', 'smap', 'snor[emap]', 'vm[ap]', 'vn[oremap]', 'xm[ap]', 'xn[oremap]',
\ 'mapc[lear]', 'smapc[lear]',
\ 'cu[nmap]', 'iu[nmap]', 'lu[nmap]', 'nun[map]', 'ou[nmap]', 'sunm[ap]', 'unm[ap]', 'unm[ap]', 'vu[nmap]', 'xu[nmap]',
\ 'com[mand]',
\ 'norm[al]',
\ 'sy[ntax]',
\ 'hi[ghlight]',
\ ]

function! s:_gen_set() abort
  let s:V = vital#of('vital')
  let s:Set = s:V.import('Data.Set')
  let commands_set = s:Set.set()
  for c in s:commands
    let pre = matchstr(c, '^\w\+\ze\[\=')
    let opt_chars = matchstr(c, '\[\zs\w\+\ze\]')
    for oc in [''] + split(opt_chars, '\zs')
      let pre .= oc
      call commands_set.add(pre)
    endfor
  endfor
  return sort(commands_set.to_list())
endfunction
" echo PP(s:_gen_set())

function! s:_setup() abort

  let s:funcnames = s:Set.set([
  \ 'abs', 'and', 'argidx', 'asin', 'browse', 'buflisted', 'bufnr', 'byteidx', 'ceil', 'cindent', 'complete', 'confirm', 'cosh', 'cursor', 'did_filetype', 'empty', 'eventhandler', 'exists', 'expr8', 'filereadable', 'finddir', 'floor', 'fnamemodify', 'foldlevel', 'foreground', 'get', 'getchar', 'getcmdline', 'getcmdwintype', 'getfontname', 'getftime', 'getloclist', 'getpos', 'getregtype', 'getwinposx', 'glob', 'has', 'hasmapto', 'histget', 'hlID', 'indent', 'inputdialog', 'inputsave', 'invert', 'items', 'len', 'line', 'localtime', 'luaeval', 'mapcheck', 'matchaddpos', 'matchend', 'max', 'mode', 'nr2char', 'pow', 'pumvisible', 'range', 'reltimestr', 'remote_peek', 'remove', 'resolve', 'screenattr', 'screenrow', 'searchpair', 'server2client', 'setcharsearch', 'setloclist', 'setqflist', 'settabwinvar', 'shellescape', 'sin', 'soundfold', 'split', 'str2float', 'strchars', 'strftime', 'string', 'strpart', 'strtrans', 'submatch', 'synconcealed', 'synIDattr', 'synstack', 'systemlist', 'tabpagenr', 'tagfiles', 'tan', 'tempname', 'toupper', 'trunc', 'undofile', 'uniq', 'virtcol', 'wildmenumode', 'wincol', 'winline', 'winrestcmd', 'winsaveview', 'writefile',
  \ 'acos', 'append', 'arglistid', 'atan', 'browsedir', 'bufloaded', 'bufwinnr', 'byteidxcomp', 'changenr', 'clearmatches', 'complete_add', 'copy', 'count', 'deepcopy', 'diff_filler', 'escape', 'executable', 'exp', 'extend', 'filewritable', 'findfile', 'fmod', 'foldclosed', 'foldtext', 'function', 'getbufline', 'getcharmod', 'getcmdpos', 'getcurpos', 'getfperm', 'getftype', 'getmatches', 'getqflist', 'gettabvar', 'getwinposy', 'glob2regpat', 'has_key', 'histadd', 'histnr', 'hostname', 'index', 'inputlist', 'inputsecret', 'isdirectory', 'join', 'libcall', 'line2byte', 'log', 'map', 'match', 'matcharg', 'matchlist', 'min', 'mzeval', 'or', 'prevnonblank', 'py3eval', 'readfile', 'remote_expr', 'remote_read', 'rename', 'reverse', 'screenchar', 'search', 'searchpairpos', 'serverlist', 'setcmdpos', 'setmatches', 'setreg', 'setwinvar', 'shiftwidth', 'sinh', 'spellbadword', 'sqrt', 'str2nr', 'strdisplaywidth', 'stridx', 'strlen', 'strridx', 'strwidth', 'substitute', 'synID', 'synIDtrans', 'system', 'tabpagebuflist', 'tabpagewinnr', 'taglist', 'tanh', 'tolower', 'tr', 'type', 'undotree', 'values', 'visualmode', 'winbufnr', 'winheight', 'winnr', 'winrestview', 'winwidth', 'xor',
  \ 'add', 'argc', 'argv', 'atan2', 'bufexists', 'bufname', 'byte2line', 'call', 'char2nr', 'col', 'complete_check', 'cos', 'cscope_connection', 'delete', 'diff_hlID', 'eval', 'exepath', 'expand', 'feedkeys', 'filter', 'float2nr', 'fnameescape', 'foldclosedend', 'foldtextresult', 'garbagecollect', 'getbufvar', 'getcharsearch', 'getcmdtype', 'getcwd', 'getfsize', 'getline', 'getpid', 'getreg', 'gettabwinvar', 'getwinvar', 'globpath', 'haslocaldir', 'histdel', 'hlexists', 'iconv', 'input', 'inputrestore', 'insert', 'islocked', 'keys', 'libcallnr', 'lispindent', 'log10', 'maparg', 'matchadd', 'matchdelete', 'matchstr', 'mkdir', 'nextnonblank', 'pathshorten', 'printf', 'pyeval', 'reltime', 'remote_foreground', 'remote_send', 'repeat', 'round', 'screencol', 'searchdecl', 'searchpos', 'setbufvar', 'setline', 'setpos', 'settabvar', 'sha256', 'simplify', 'sort', 'spellsuggest',
  \ ])

  let s:command_set = s:Set.set(
  \ [
  \   'a',
  \   'ab',
  \   'abc',
  \   'abcl',
  \   'abcle',
  \   'abclea',
  \   'abclear',
  \   'abo',
  \   'abov',
  \   'above',
  \   'abovel',
  \   'abovele',
  \   'abovelef',
  \   'aboveleft',
  \   'al',
  \   'all',
  \   'ar',
  \   'arg',
  \   'arga',
  \   'argad',
  \   'argadd',
  \   'argd',
  \   'argde',
  \   'argdel',
  \   'argdele',
  \   'argdelet',
  \   'argdelete',
  \   'argdo',
  \   'arge',
  \   'arged',
  \   'argedi',
  \   'argedit',
  \   'argg',
  \   'arggl',
  \   'argglo',
  \   'argglob',
  \   'arggloba',
  \   'argglobal',
  \   'argl',
  \   'arglo',
  \   'argloc',
  \   'argloca',
  \   'arglocal',
  \   'args',
  \   'argu',
  \   'argum',
  \   'argume',
  \   'argumen',
  \   'argument',
  \   'as',
  \   'asc',
  \   'asci',
  \   'ascii',
  \   'au',
  \   'aug',
  \   'augr',
  \   'augro',
  \   'augrou',
  \   'augroup',
  \   'aut',
  \   'auto',
  \   'autoc',
  \   'autocm',
  \   'autocmd',
  \   'b',
  \   'bN',
  \   'bNe',
  \   'bNex',
  \   'bNext',
  \   'ba',
  \   'bad',
  \   'badd',
  \   'bal',
  \   'ball',
  \   'bd',
  \   'bde',
  \   'bdel',
  \   'bdele',
  \   'bdelet',
  \   'bdelete',
  \   'bel',
  \   'belo',
  \   'below',
  \   'belowr',
  \   'belowri',
  \   'belowrig',
  \   'belowrigh',
  \   'belowright',
  \   'bf',
  \   'bfi',
  \   'bfir',
  \   'bfirs',
  \   'bfirst',
  \   'bl',
  \   'bla',
  \   'blas',
  \   'blast',
  \   'bm',
  \   'bmo',
  \   'bmod',
  \   'bmodi',
  \   'bmodif',
  \   'bmodifi',
  \   'bmodifie',
  \   'bmodified',
  \   'bn',
  \   'bne',
  \   'bnex',
  \   'bnext',
  \   'bo',
  \   'bot',
  \   'botr',
  \   'botri',
  \   'botrig',
  \   'botrigh',
  \   'botright',
  \   'bp',
  \   'bpr',
  \   'bpre',
  \   'bprev',
  \   'bprevi',
  \   'bprevio',
  \   'bpreviou',
  \   'bprevious',
  \   'br',
  \   'bre',
  \   'brea',
  \   'break',
  \   'breaka',
  \   'breakad',
  \   'breakadd',
  \   'breakd',
  \   'breakde',
  \   'breakdel',
  \   'breakl',
  \   'breakli',
  \   'breaklis',
  \   'breaklist',
  \   'brew',
  \   'brewi',
  \   'brewin',
  \   'brewind',
  \   'bro',
  \   'brow',
  \   'brows',
  \   'browse',
  \   'bu',
  \   'buf',
  \   'bufdo',
  \   'buff',
  \   'buffe',
  \   'buffer',
  \   'buffers',
  \   'bun',
  \   'bunl',
  \   'bunlo',
  \   'bunloa',
  \   'bunload',
  \   'bw',
  \   'bwi',
  \   'bwip',
  \   'bwipe',
  \   'bwipeo',
  \   'bwipeou',
  \   'bwipeout',
  \   'c',
  \   'cN',
  \   'cNe',
  \   'cNex',
  \   'cNext',
  \   'cNf',
  \   'cNfi',
  \   'cNfil',
  \   'cNfile',
  \   'cabc',
  \   'cabcl',
  \   'cabcle',
  \   'cabclea',
  \   'cabclear',
  \   'cad',
  \   'cadd',
  \   'caddb',
  \   'caddbu',
  \   'caddbuf',
  \   'caddbuff',
  \   'caddbuffe',
  \   'caddbuffer',
  \   'cadde',
  \   'caddex',
  \   'caddexp',
  \   'caddexpr',
  \   'caddf',
  \   'caddfi',
  \   'caddfil',
  \   'caddfile',
  \   'cal',
  \   'call',
  \   'cat',
  \   'catc',
  \   'catch',
  \   'cb',
  \   'cbu',
  \   'cbuf',
  \   'cbuff',
  \   'cbuffe',
  \   'cbuffer',
  \   'cc',
  \   'ccl',
  \   'cclo',
  \   'cclos',
  \   'cclose',
  \   'cd',
  \   'cdo',
  \   'ce',
  \   'cen',
  \   'cent',
  \   'cente',
  \   'center',
  \   'cex',
  \   'cexp',
  \   'cexpr',
  \   'cf',
  \   'cfdo',
  \   'cfi',
  \   'cfil',
  \   'cfile',
  \   'cfir',
  \   'cfirs',
  \   'cfirst',
  \   'cg',
  \   'cge',
  \   'cget',
  \   'cgetb',
  \   'cgetbu',
  \   'cgetbuf',
  \   'cgetbuff',
  \   'cgetbuffe',
  \   'cgetbuffer',
  \   'cgete',
  \   'cgetex',
  \   'cgetexp',
  \   'cgetexpr',
  \   'cgetf',
  \   'cgetfi',
  \   'cgetfil',
  \   'cgetfile',
  \   'ch',
  \   'cha',
  \   'chan',
  \   'chang',
  \   'change',
  \   'changes',
  \   'chd',
  \   'chdi',
  \   'chdir',
  \   'che',
  \   'chec',
  \   'check',
  \   'checkp',
  \   'checkpa',
  \   'checkpat',
  \   'checkpath',
  \   'checkt',
  \   'checkti',
  \   'checktim',
  \   'checktime',
  \   'cl',
  \   'cla',
  \   'clas',
  \   'clast',
  \   'cli',
  \   'clis',
  \   'clist',
  \   'clo',
  \   'clos',
  \   'close',
  \   'cm',
  \   'cma',
  \   'cmap',
  \   'cmapc',
  \   'cmapcl',
  \   'cmapcle',
  \   'cmapclea',
  \   'cmapclear',
  \   'cn',
  \   'cne',
  \   'cnew',
  \   'cnewe',
  \   'cnewer',
  \   'cnex',
  \   'cnext',
  \   'cnf',
  \   'cnfi',
  \   'cnfil',
  \   'cnfile',
  \   'cno',
  \   'cnor',
  \   'cnore',
  \   'cnorem',
  \   'cnorema',
  \   'cnoremap',
  \   'co',
  \   'col',
  \   'cold',
  \   'colde',
  \   'colder',
  \   'colo',
  \   'color',
  \   'colors',
  \   'colorsc',
  \   'colorsch',
  \   'colorsche',
  \   'colorschem',
  \   'colorscheme',
  \   'com',
  \   'comc',
  \   'comcl',
  \   'comcle',
  \   'comclea',
  \   'comclear',
  \   'comm',
  \   'comma',
  \   'comman',
  \   'command',
  \   'comp',
  \   'compi',
  \   'compil',
  \   'compile',
  \   'compiler',
  \   'con',
  \   'conf',
  \   'confi',
  \   'confir',
  \   'confirm',
  \   'cont',
  \   'conti',
  \   'contin',
  \   'continu',
  \   'continue',
  \   'cop',
  \   'cope',
  \   'copen',
  \   'copy',
  \   'cp',
  \   'cpf',
  \   'cpfi',
  \   'cpfil',
  \   'cpfile',
  \   'cpr',
  \   'cpre',
  \   'cprev',
  \   'cprevi',
  \   'cprevio',
  \   'cpreviou',
  \   'cprevious',
  \   'cq',
  \   'cqu',
  \   'cqui',
  \   'cquit',
  \   'cr',
  \   'cre',
  \   'crew',
  \   'crewi',
  \   'crewin',
  \   'crewind',
  \   'cs',
  \   'cscope',
  \   'cstag',
  \   'cu',
  \   'cun',
  \   'cuna',
  \   'cunab',
  \   'cunabb',
  \   'cunabbr',
  \   'cunabbre',
  \   'cunabbrev',
  \   'cunm',
  \   'cunma',
  \   'cunmap',
  \   'cw',
  \   'cwi',
  \   'cwin',
  \   'cwind',
  \   'cwindo',
  \   'cwindow',
  \   'd',
  \   'de',
  \   'debug',
  \   'debugg',
  \   'debuggr',
  \   'debuggre',
  \   'debuggree',
  \   'debuggreed',
  \   'debuggreedy',
  \   'del',
  \   'delc',
  \   'delco',
  \   'delcom',
  \   'delcomm',
  \   'delcomma',
  \   'delcomman',
  \   'delcommand',
  \   'dele',
  \   'delel',
  \   'delep',
  \   'delet',
  \   'delete',
  \   'deletel',
  \   'deletep',
  \   'deletl',
  \   'deletp',
  \   'delf',
  \   'delfu',
  \   'delfun',
  \   'delfunc',
  \   'delfunct',
  \   'delfuncti',
  \   'delfunctio',
  \   'delfunction',
  \   'dell',
  \   'delm',
  \   'delma',
  \   'delmar',
  \   'delmark',
  \   'delmarks',
  \   'delp',
  \   'dep',
  \   'di',
  \   'diffg',
  \   'diffge',
  \   'diffget',
  \   'diffo',
  \   'diffof',
  \   'diffoff',
  \   'diffp',
  \   'diffpa',
  \   'diffpat',
  \   'diffpatc',
  \   'diffpatch',
  \   'diffpu',
  \   'diffput',
  \   'diffs',
  \   'diffsp',
  \   'diffspl',
  \   'diffspli',
  \   'diffsplit',
  \   'difft',
  \   'diffth',
  \   'diffthi',
  \   'diffthis',
  \   'diffu',
  \   'diffup',
  \   'diffupd',
  \   'diffupda',
  \   'diffupdat',
  \   'diffupdate',
  \   'dig',
  \   'digr',
  \   'digra',
  \   'digrap',
  \   'digraph',
  \   'digraphs',
  \   'dir',
  \   'dis',
  \   'disp',
  \   'displ',
  \   'displa',
  \   'display',
  \   'dj',
  \   'dju',
  \   'djum',
  \   'djump',
  \   'dl',
  \   'dli',
  \   'dlis',
  \   'dlist',
  \   'do',
  \   'doa',
  \   'doau',
  \   'doaut',
  \   'doauto',
  \   'doautoa',
  \   'doautoal',
  \   'doautoall',
  \   'doautoc',
  \   'doautocm',
  \   'doautocmd',
  \   'dp',
  \   'dr',
  \   'dro',
  \   'drop',
  \   'ds',
  \   'dse',
  \   'dsea',
  \   'dsear',
  \   'dsearc',
  \   'dsearch',
  \   'dsp',
  \   'dspl',
  \   'dspli',
  \   'dsplit',
  \   'e',
  \   'ea',
  \   'earlier',
  \   'ec',
  \   'ech',
  \   'echo',
  \   'echoe',
  \   'echoer',
  \   'echoerr',
  \   'echoh',
  \   'echohl',
  \   'echom',
  \   'echoms',
  \   'echomsg',
  \   'echon',
  \   'ed',
  \   'edi',
  \   'edit',
  \   'el',
  \   'els',
  \   'else',
  \   'elsei',
  \   'elseif',
  \   'em',
  \   'eme',
  \   'emen',
  \   'emenu',
  \   'en',
  \   'end',
  \   'endf',
  \   'endfo',
  \   'endfor',
  \   'endfu',
  \   'endfun',
  \   'endfunc',
  \   'endfunct',
  \   'endfuncti',
  \   'endfunctio',
  \   'endfunction',
  \   'endi',
  \   'endif',
  \   'endt',
  \   'endtr',
  \   'endtry',
  \   'endw',
  \   'endwh',
  \   'endwhi',
  \   'endwhil',
  \   'endwhile',
  \   'ene',
  \   'enew',
  \   'ex',
  \   'exe',
  \   'exec',
  \   'execu',
  \   'execut',
  \   'execute',
  \   'exi',
  \   'exit',
  \   'exu',
  \   'exus',
  \   'exusa',
  \   'exusag',
  \   'exusage',
  \   'f',
  \   'fi',
  \   'fil',
  \   'file',
  \   'files',
  \   'filet',
  \   'filetype',
  \   'fin',
  \   'fina',
  \   'final',
  \   'finall',
  \   'finally',
  \   'find',
  \   'fini',
  \   'finis',
  \   'finish',
  \   'fir',
  \   'firs',
  \   'first',
  \   'fix',
  \   'fixd',
  \   'fixde',
  \   'fixdel',
  \   'fo',
  \   'fol',
  \   'fold',
  \   'foldc',
  \   'foldcl',
  \   'foldclo',
  \   'foldclos',
  \   'foldclose',
  \   'foldd',
  \   'folddo',
  \   'folddoc',
  \   'folddocl',
  \   'folddoclo',
  \   'folddoclos',
  \   'folddoclose',
  \   'folddoclosed',
  \   'folddoo',
  \   'folddoop',
  \   'folddoope',
  \   'folddoopen',
  \   'foldo',
  \   'foldop',
  \   'foldope',
  \   'foldopen',
  \   'for',
  \   'fu',
  \   'fun',
  \   'func',
  \   'funct',
  \   'functi',
  \   'functio',
  \   'function',
  \   'g',
  \   'go',
  \   'got',
  \   'goto',
  \   'gr',
  \   'gre',
  \   'grep',
  \   'grepa',
  \   'grepad',
  \   'grepadd',
  \   'gui',
  \   'gvim',
  \   'h',
  \   'ha',
  \   'har',
  \   'hard',
  \   'hardc',
  \   'hardco',
  \   'hardcop',
  \   'hardcopy',
  \   'he',
  \   'hel',
  \   'help',
  \   'helpc',
  \   'helpcl',
  \   'helpclo',
  \   'helpclos',
  \   'helpclose',
  \   'helpf',
  \   'helpfi',
  \   'helpfin',
  \   'helpfind',
  \   'helpg',
  \   'helpgr',
  \   'helpgre',
  \   'helpgrep',
  \   'helpt',
  \   'helpta',
  \   'helptag',
  \   'helptags',
  \   'hi',
  \   'hid',
  \   'hide',
  \   'hig',
  \   'high',
  \   'highl',
  \   'highli',
  \   'highlig',
  \   'highligh',
  \   'highlight',
  \   'his',
  \   'hist',
  \   'histo',
  \   'histor',
  \   'history',
  \   'i',
  \   'ia',
  \   'iabc',
  \   'iabcl',
  \   'iabcle',
  \   'iabclea',
  \   'iabclear',
  \   'if',
  \   'ij',
  \   'iju',
  \   'ijum',
  \   'ijump',
  \   'il',
  \   'ili',
  \   'ilis',
  \   'ilist',
  \   'im',
  \   'ima',
  \   'imap',
  \   'imapc',
  \   'imapcl',
  \   'imapcle',
  \   'imapclea',
  \   'imapclear',
  \   'in',
  \   'ino',
  \   'inor',
  \   'inore',
  \   'inorem',
  \   'inorema',
  \   'inoremap',
  \   'intro',
  \   'is',
  \   'ise',
  \   'isea',
  \   'isear',
  \   'isearc',
  \   'isearch',
  \   'isp',
  \   'ispl',
  \   'ispli',
  \   'isplit',
  \   'iu',
  \   'iun',
  \   'iuna',
  \   'iunab',
  \   'iunabb',
  \   'iunabbr',
  \   'iunabbre',
  \   'iunabbrev',
  \   'iunm',
  \   'iunma',
  \   'iunmap',
  \   'j',
  \   'jo',
  \   'joi',
  \   'join',
  \   'ju',
  \   'jum',
  \   'jump',
  \   'jumps',
  \   'k',
  \   'kee',
  \   'keep',
  \   'keepa',
  \   'keepalt',
  \   'keepj',
  \   'keepju',
  \   'keepjum',
  \   'keepjump',
  \   'keepjumps',
  \   'keepm',
  \   'keepma',
  \   'keepmar',
  \   'keepmark',
  \   'keepmarks',
  \   'keepp',
  \   'keeppa',
  \   'keeppat',
  \   'keeppatt',
  \   'keeppatte',
  \   'keeppatter',
  \   'keeppattern',
  \   'keeppatterns',
  \   'l',
  \   'lN',
  \   'lNe',
  \   'lNex',
  \   'lNext',
  \   'lNf',
  \   'lNfi',
  \   'lNfil',
  \   'lNfile',
  \   'la',
  \   'lad',
  \   'ladd',
  \   'laddb',
  \   'laddbu',
  \   'laddbuf',
  \   'laddbuff',
  \   'laddbuffe',
  \   'laddbuffer',
  \   'ladde',
  \   'laddex',
  \   'laddexp',
  \   'laddexpr',
  \   'laddf',
  \   'laddfi',
  \   'laddfil',
  \   'laddfile',
  \   'lan',
  \   'lang',
  \   'langu',
  \   'langua',
  \   'languag',
  \   'language',
  \   'las',
  \   'last',
  \   'lat',
  \   'later',
  \   'lb',
  \   'lbu',
  \   'lbuf',
  \   'lbuff',
  \   'lbuffe',
  \   'lbuffer',
  \   'lc',
  \   'lcd',
  \   'lch',
  \   'lchd',
  \   'lchdi',
  \   'lchdir',
  \   'lcl',
  \   'lclo',
  \   'lclos',
  \   'lclose',
  \   'lcs',
  \   'lcscope',
  \   'ld',
  \   'ldo',
  \   'le',
  \   'lef',
  \   'left',
  \   'lefta',
  \   'leftab',
  \   'leftabo',
  \   'leftabov',
  \   'leftabove',
  \   'let',
  \   'lex',
  \   'lexp',
  \   'lexpr',
  \   'lf',
  \   'lfdo',
  \   'lfi',
  \   'lfil',
  \   'lfile',
  \   'lfir',
  \   'lfirs',
  \   'lfirst',
  \   'lg',
  \   'lge',
  \   'lget',
  \   'lgetb',
  \   'lgetbu',
  \   'lgetbuf',
  \   'lgetbuff',
  \   'lgetbuffe',
  \   'lgetbuffer',
  \   'lgete',
  \   'lgetex',
  \   'lgetexp',
  \   'lgetexpr',
  \   'lgetf',
  \   'lgetfi',
  \   'lgetfil',
  \   'lgetfile',
  \   'lgr',
  \   'lgre',
  \   'lgrep',
  \   'lgrepa',
  \   'lgrepad',
  \   'lgrepadd',
  \   'lh',
  \   'lhe',
  \   'lhel',
  \   'lhelp',
  \   'lhelpg',
  \   'lhelpgr',
  \   'lhelpgre',
  \   'lhelpgrep',
  \   'li',
  \   'lis',
  \   'list',
  \   'll',
  \   'lla',
  \   'llas',
  \   'llast',
  \   'lli',
  \   'llis',
  \   'llist',
  \   'lm',
  \   'lma',
  \   'lmak',
  \   'lmake',
  \   'lmap',
  \   'lmapc',
  \   'lmapcl',
  \   'lmapcle',
  \   'lmapclea',
  \   'lmapclear',
  \   'ln',
  \   'lne',
  \   'lnew',
  \   'lnewe',
  \   'lnewer',
  \   'lnex',
  \   'lnext',
  \   'lnf',
  \   'lnfi',
  \   'lnfil',
  \   'lnfile',
  \   'lno',
  \   'lnor',
  \   'lnore',
  \   'lnorem',
  \   'lnorema',
  \   'lnoremap',
  \   'lo',
  \   'loa',
  \   'load',
  \   'loadk',
  \   'loadkeymap',
  \   'loadv',
  \   'loadvi',
  \   'loadvie',
  \   'loadview',
  \   'loc',
  \   'lock',
  \   'lockm',
  \   'lockma',
  \   'lockmar',
  \   'lockmark',
  \   'lockmarks',
  \   'lockv',
  \   'lockva',
  \   'lockvar',
  \   'lol',
  \   'lold',
  \   'lolde',
  \   'lolder',
  \   'lop',
  \   'lope',
  \   'lopen',
  \   'lp',
  \   'lpf',
  \   'lpfi',
  \   'lpfil',
  \   'lpfile',
  \   'lpr',
  \   'lpre',
  \   'lprev',
  \   'lprevi',
  \   'lprevio',
  \   'lpreviou',
  \   'lprevious',
  \   'lr',
  \   'lre',
  \   'lrew',
  \   'lrewi',
  \   'lrewin',
  \   'lrewind',
  \   'ls',
  \   'lt',
  \   'lta',
  \   'ltag',
  \   'lu',
  \   'lua',
  \   'luado',
  \   'luafile',
  \   'lun',
  \   'lunm',
  \   'lunma',
  \   'lunmap',
  \   'lv',
  \   'lvi',
  \   'lvim',
  \   'lvimg',
  \   'lvimgr',
  \   'lvimgre',
  \   'lvimgrep',
  \   'lvimgrepa',
  \   'lvimgrepad',
  \   'lvimgrepadd',
  \   'lw',
  \   'lwi',
  \   'lwin',
  \   'lwind',
  \   'lwindo',
  \   'lwindow',
  \   'm',
  \   'ma',
  \   'mak',
  \   'make',
  \   'map',
  \   'mapc',
  \   'mapcl',
  \   'mapcle',
  \   'mapclea',
  \   'mapclear',
  \   'mar',
  \   'mark',
  \   'marks',
  \   'mat',
  \   'matc',
  \   'match',
  \   'menut',
  \   'menutr',
  \   'menutra',
  \   'menutran',
  \   'menutrans',
  \   'menutransl',
  \   'menutransla',
  \   'menutranslat',
  \   'menutranslate',
  \   'mes',
  \   'messages',
  \   'mk',
  \   'mke',
  \   'mkex',
  \   'mkexr',
  \   'mkexrc',
  \   'mks',
  \   'mkse',
  \   'mkses',
  \   'mksess',
  \   'mksessi',
  \   'mksessio',
  \   'mksession',
  \   'mksp',
  \   'mkspe',
  \   'mkspel',
  \   'mkspell',
  \   'mkv',
  \   'mkvi',
  \   'mkvie',
  \   'mkview',
  \   'mkvim',
  \   'mkvimr',
  \   'mkvimrc',
  \   'mo',
  \   'mod',
  \   'mode',
  \   'mov',
  \   'move',
  \   'mz',
  \   'mzf',
  \   'mzfi',
  \   'mzfil',
  \   'mzfile',
  \   'mzs',
  \   'mzsc',
  \   'mzsch',
  \   'mzsche',
  \   'mzschem',
  \   'mzscheme',
  \   'n',
  \   'nb',
  \   'nbc',
  \   'nbcl',
  \   'nbclo',
  \   'nbclos',
  \   'nbclose',
  \   'nbk',
  \   'nbke',
  \   'nbkey',
  \   'nbs',
  \   'nbst',
  \   'nbsta',
  \   'nbstar',
  \   'nbstart',
  \   'ne',
  \   'new',
  \   'nex',
  \   'next',
  \   'nm',
  \   'nma',
  \   'nmap',
  \   'nmapc',
  \   'nmapcl',
  \   'nmapcle',
  \   'nmapclea',
  \   'nmapclear',
  \   'nn',
  \   'nno',
  \   'nnor',
  \   'nnore',
  \   'nnorem',
  \   'nnorema',
  \   'nnoremap',
  \   'no',
  \   'noa',
  \   'noautocmd',
  \   'noh',
  \   'nohl',
  \   'nohls',
  \   'nohlse',
  \   'nohlsea',
  \   'nohlsear',
  \   'nohlsearc',
  \   'nohlsearch',
  \   'nor',
  \   'nore',
  \   'norem',
  \   'norema',
  \   'noremap',
  \   'norm',
  \   'norma',
  \   'normal',
  \   'noswap',
  \   'noswapf',
  \   'noswapfi',
  \   'noswapfil',
  \   'noswapfile',
  \   'nu',
  \   'num',
  \   'numb',
  \   'numbe',
  \   'number',
  \   'nun',
  \   'nunm',
  \   'nunma',
  \   'nunmap',
  \   'o',
  \   'ol',
  \   'old',
  \   'oldf',
  \   'oldfi',
  \   'oldfil',
  \   'oldfile',
  \   'oldfiles',
  \   'om',
  \   'oma',
  \   'omap',
  \   'omapc',
  \   'omapcl',
  \   'omapcle',
  \   'omapclea',
  \   'omapclear',
  \   'on',
  \   'onl',
  \   'only',
  \   'ono',
  \   'onor',
  \   'onore',
  \   'onorem',
  \   'onorema',
  \   'onoremap',
  \   'op',
  \   'ope',
  \   'open',
  \   'opt',
  \   'opti',
  \   'optio',
  \   'option',
  \   'options',
  \   'ou',
  \   'oun',
  \   'ounm',
  \   'ounma',
  \   'ounmap',
  \   'ownsyntax',
  \   'p',
  \   'pc',
  \   'pcl',
  \   'pclo',
  \   'pclos',
  \   'pclose',
  \   'pe',
  \   'ped',
  \   'pedi',
  \   'pedit',
  \   'per',
  \   'perl',
  \   'perld',
  \   'perldo',
  \   'po',
  \   'pop',
  \   'popu',
  \   'popup',
  \   'pp',
  \   'ppo',
  \   'ppop',
  \   'pr',
  \   'pre',
  \   'pres',
  \   'prese',
  \   'preser',
  \   'preserv',
  \   'preserve',
  \   'prev',
  \   'previ',
  \   'previo',
  \   'previou',
  \   'previous',
  \   'pri',
  \   'prin',
  \   'print',
  \   'pro',
  \   'prof',
  \   'profd',
  \   'profde',
  \   'profdel',
  \   'profi',
  \   'profil',
  \   'profile',
  \   'promptf',
  \   'promptfi',
  \   'promptfin',
  \   'promptfind',
  \   'promptr',
  \   'promptre',
  \   'promptrep',
  \   'promptrepl',
  \   'ps',
  \   'pse',
  \   'psea',
  \   'psear',
  \   'psearc',
  \   'psearch',
  \   'ptN',
  \   'ptNe',
  \   'ptNex',
  \   'ptNext',
  \   'pta',
  \   'ptag',
  \   'ptf',
  \   'ptfi',
  \   'ptfir',
  \   'ptfirs',
  \   'ptfirst',
  \   'ptj',
  \   'ptju',
  \   'ptjum',
  \   'ptjump',
  \   'ptl',
  \   'ptla',
  \   'ptlas',
  \   'ptlast',
  \   'ptn',
  \   'ptne',
  \   'ptnex',
  \   'ptnext',
  \   'ptp',
  \   'ptpr',
  \   'ptpre',
  \   'ptprev',
  \   'ptprevi',
  \   'ptprevio',
  \   'ptpreviou',
  \   'ptprevious',
  \   'ptr',
  \   'ptre',
  \   'ptrew',
  \   'ptrewi',
  \   'ptrewin',
  \   'ptrewind',
  \   'pts',
  \   'ptse',
  \   'ptsel',
  \   'ptsele',
  \   'ptselec',
  \   'ptselect',
  \   'pu',
  \   'put',
  \   'pw',
  \   'pwd',
  \   'py',
  \   'py3',
  \   'py3do',
  \   'pydo',
  \   'pyf',
  \   'pyfi',
  \   'pyfil',
  \   'pyfile',
  \   'pyt',
  \   'pyth',
  \   'pytho',
  \   'python',
  \   'python3',
  \   'q',
  \   'qa',
  \   'qal',
  \   'qall',
  \   'qu',
  \   'qui',
  \   'quit',
  \   'quita',
  \   'quital',
  \   'quitall',
  \   'r',
  \   're',
  \   'rea',
  \   'read',
  \   'rec',
  \   'reco',
  \   'recov',
  \   'recove',
  \   'recover',
  \   'red',
  \   'redi',
  \   'redir',
  \   'redo',
  \   'redr',
  \   'redra',
  \   'redraw',
  \   'redraws',
  \   'redrawst',
  \   'redrawsta',
  \   'redrawstat',
  \   'redrawstatu',
  \   'redrawstatus',
  \   'reg',
  \   'regi',
  \   'regis',
  \   'regist',
  \   'registe',
  \   'register',
  \   'registers',
  \   'res',
  \   'resi',
  \   'resiz',
  \   'resize',
  \   'ret',
  \   'reta',
  \   'retab',
  \   'retu',
  \   'retur',
  \   'return',
  \   'rew',
  \   'rewi',
  \   'rewin',
  \   'rewind',
  \   'ri',
  \   'rig',
  \   'righ',
  \   'right',
  \   'rightb',
  \   'rightbe',
  \   'rightbel',
  \   'rightbelo',
  \   'rightbelow',
  \   'ru',
  \   'rub',
  \   'ruby',
  \   'rubyd',
  \   'rubydo',
  \   'rubyf',
  \   'rubyfi',
  \   'rubyfil',
  \   'rubyfile',
  \   'run',
  \   'rundo',
  \   'runt',
  \   'runti',
  \   'runtim',
  \   'runtime',
  \   'rv',
  \   'rvi',
  \   'rvim',
  \   'rvimi',
  \   'rvimin',
  \   'rviminf',
  \   'rviminfo',
  \   'sN',
  \   'sNe',
  \   'sNex',
  \   'sNext',
  \   'sa',
  \   'sal',
  \   'sall',
  \   'san',
  \   'sand',
  \   'sandb',
  \   'sandbo',
  \   'sandbox',
  \   'sar',
  \   'sarg',
  \   'sargu',
  \   'sargum',
  \   'sargume',
  \   'sargumen',
  \   'sargument',
  \   'sav',
  \   'save',
  \   'savea',
  \   'saveas',
  \   'sb',
  \   'sbN',
  \   'sbNe',
  \   'sbNex',
  \   'sbNext',
  \   'sba',
  \   'sbal',
  \   'sball',
  \   'sbf',
  \   'sbfi',
  \   'sbfir',
  \   'sbfirs',
  \   'sbfirst',
  \   'sbl',
  \   'sbla',
  \   'sblas',
  \   'sblast',
  \   'sbm',
  \   'sbmo',
  \   'sbmod',
  \   'sbmodi',
  \   'sbmodif',
  \   'sbmodifi',
  \   'sbmodifie',
  \   'sbmodified',
  \   'sbn',
  \   'sbne',
  \   'sbnex',
  \   'sbnext',
  \   'sbp',
  \   'sbpr',
  \   'sbpre',
  \   'sbprev',
  \   'sbprevi',
  \   'sbprevio',
  \   'sbpreviou',
  \   'sbprevious',
  \   'sbr',
  \   'sbre',
  \   'sbrew',
  \   'sbrewi',
  \   'sbrewin',
  \   'sbrewind',
  \   'sbu',
  \   'sbuf',
  \   'sbuff',
  \   'sbuffe',
  \   'sbuffer',
  \   'scrip',
  \   'script',
  \   'scripte',
  \   'scripten',
  \   'scriptenc',
  \   'scriptenco',
  \   'scriptencod',
  \   'scriptencodi',
  \   'scriptencodin',
  \   'scriptencoding',
  \   'scriptn',
  \   'scriptna',
  \   'scriptnam',
  \   'scriptname',
  \   'scriptnames',
  \   'scs',
  \   'scscope',
  \   'se',
  \   'set',
  \   'setf',
  \   'setfi',
  \   'setfil',
  \   'setfile',
  \   'setfilet',
  \   'setfilety',
  \   'setfiletyp',
  \   'setfiletype',
  \   'setg',
  \   'setgl',
  \   'setglo',
  \   'setglob',
  \   'setgloba',
  \   'setglobal',
  \   'setl',
  \   'setlo',
  \   'setloc',
  \   'setloca',
  \   'setlocal',
  \   'sf',
  \   'sfi',
  \   'sfin',
  \   'sfind',
  \   'sfir',
  \   'sfirs',
  \   'sfirst',
  \   'sh',
  \   'she',
  \   'shel',
  \   'shell',
  \   'si',
  \   'sig',
  \   'sign',
  \   'sil',
  \   'sile',
  \   'silen',
  \   'silent',
  \   'sim',
  \   'sima',
  \   'simal',
  \   'simalt',
  \   'sl',
  \   'sla',
  \   'slas',
  \   'slast',
  \   'sle',
  \   'slee',
  \   'sleep',
  \   'sm',
  \   'sma',
  \   'smag',
  \   'smagi',
  \   'smagic',
  \   'smap',
  \   'smapc',
  \   'smapcl',
  \   'smapcle',
  \   'smapclea',
  \   'smapclear',
  \   'sme',
  \   'smenu',
  \   'sn',
  \   'sne',
  \   'snex',
  \   'snext',
  \   'sni',
  \   'snif',
  \   'sniff',
  \   'sno',
  \   'snom',
  \   'snoma',
  \   'snomag',
  \   'snomagi',
  \   'snomagic',
  \   'snor',
  \   'snore',
  \   'snorem',
  \   'snorema',
  \   'snoremap',
  \   'snoreme',
  \   'snoremenu',
  \   'so',
  \   'sor',
  \   'sort',
  \   'sou',
  \   'sour',
  \   'sourc',
  \   'source',
  \   'sp',
  \   'spe',
  \   'spel',
  \   'spell',
  \   'spelld',
  \   'spelldu',
  \   'spelldum',
  \   'spelldump',
  \   'spellg',
  \   'spellgo',
  \   'spellgoo',
  \   'spellgood',
  \   'spelli',
  \   'spellin',
  \   'spellinf',
  \   'spellinfo',
  \   'spellr',
  \   'spellre',
  \   'spellrep',
  \   'spellrepa',
  \   'spellrepal',
  \   'spellrepall',
  \   'spellu',
  \   'spellun',
  \   'spellund',
  \   'spellundo',
  \   'spellw',
  \   'spellwr',
  \   'spellwro',
  \   'spellwron',
  \   'spellwrong',
  \   'spl',
  \   'spli',
  \   'split',
  \   'spr',
  \   'spre',
  \   'sprev',
  \   'sprevi',
  \   'sprevio',
  \   'spreviou',
  \   'sprevious',
  \   'sre',
  \   'srew',
  \   'srewi',
  \   'srewin',
  \   'srewind',
  \   'st',
  \   'sta',
  \   'stag',
  \   'star',
  \   'start',
  \   'startg',
  \   'startgr',
  \   'startgre',
  \   'startgrep',
  \   'startgrepl',
  \   'startgrepla',
  \   'startgreplac',
  \   'startgreplace',
  \   'starti',
  \   'startin',
  \   'startins',
  \   'startinse',
  \   'startinser',
  \   'startinsert',
  \   'startr',
  \   'startre',
  \   'startrep',
  \   'startrepl',
  \   'startrepla',
  \   'startreplac',
  \   'startreplace',
  \   'stj',
  \   'stju',
  \   'stjum',
  \   'stjump',
  \   'sto',
  \   'stop',
  \   'stopi',
  \   'stopin',
  \   'stopins',
  \   'stopinse',
  \   'stopinser',
  \   'stopinsert',
  \   'sts',
  \   'stse',
  \   'stsel',
  \   'stsele',
  \   'stselec',
  \   'stselect',
  \   'sun',
  \   'sunh',
  \   'sunhi',
  \   'sunhid',
  \   'sunhide',
  \   'sunm',
  \   'sunma',
  \   'sunmap',
  \   'sunme',
  \   'sunmenu',
  \   'sus',
  \   'susp',
  \   'suspe',
  \   'suspen',
  \   'suspend',
  \   'sv',
  \   'svi',
  \   'svie',
  \   'sview',
  \   'sw',
  \   'swa',
  \   'swap',
  \   'swapn',
  \   'swapna',
  \   'swapnam',
  \   'swapname',
  \   'sy',
  \   'syn',
  \   'sync',
  \   'syncbind',
  \   'synt',
  \   'synta',
  \   'syntax',
  \   'syntime',
  \   't',
  \   'tN',
  \   'tNe',
  \   'tNex',
  \   'tNext',
  \   'ta',
  \   'tab',
  \   'tabN',
  \   'tabNe',
  \   'tabNex',
  \   'tabNext',
  \   'tabc',
  \   'tabcl',
  \   'tabclo',
  \   'tabclos',
  \   'tabclose',
  \   'tabd',
  \   'tabdo',
  \   'tabe',
  \   'tabed',
  \   'tabedi',
  \   'tabedit',
  \   'tabf',
  \   'tabfi',
  \   'tabfin',
  \   'tabfind',
  \   'tabfir',
  \   'tabfirs',
  \   'tabfirst',
  \   'tabl',
  \   'tabla',
  \   'tablas',
  \   'tablast',
  \   'tabm',
  \   'tabmo',
  \   'tabmov',
  \   'tabmove',
  \   'tabn',
  \   'tabne',
  \   'tabnew',
  \   'tabnex',
  \   'tabnext',
  \   'tabo',
  \   'tabon',
  \   'tabonl',
  \   'tabonly',
  \   'tabp',
  \   'tabpr',
  \   'tabpre',
  \   'tabprev',
  \   'tabprevi',
  \   'tabprevio',
  \   'tabpreviou',
  \   'tabprevious',
  \   'tabr',
  \   'tabre',
  \   'tabrew',
  \   'tabrewi',
  \   'tabrewin',
  \   'tabrewind',
  \   'tabs',
  \   'tag',
  \   'tags',
  \   'tc',
  \   'tcl',
  \   'tcld',
  \   'tcldo',
  \   'tclf',
  \   'tclfi',
  \   'tclfil',
  \   'tclfile',
  \   'te',
  \   'tea',
  \   'tear',
  \   'tearo',
  \   'tearof',
  \   'tearoff',
  \   'tf',
  \   'tfi',
  \   'tfir',
  \   'tfirs',
  \   'tfirst',
  \   'th',
  \   'thr',
  \   'thro',
  \   'throw',
  \   'tj',
  \   'tju',
  \   'tjum',
  \   'tjump',
  \   'tl',
  \   'tla',
  \   'tlas',
  \   'tlast',
  \   'tm',
  \   'tme',
  \   'tmen',
  \   'tmenu',
  \   'tn',
  \   'tne',
  \   'tnex',
  \   'tnext',
  \   'to',
  \   'top',
  \   'topl',
  \   'tople',
  \   'toplef',
  \   'topleft',
  \   'tp',
  \   'tpr',
  \   'tpre',
  \   'tprev',
  \   'tprevi',
  \   'tprevio',
  \   'tpreviou',
  \   'tprevious',
  \   'tr',
  \   'tre',
  \   'trew',
  \   'trewi',
  \   'trewin',
  \   'trewind',
  \   'try',
  \   'ts',
  \   'tse',
  \   'tsel',
  \   'tsele',
  \   'tselec',
  \   'tselect',
  \   'tu',
  \   'tun',
  \   'tunm',
  \   'tunme',
  \   'tunmen',
  \   'tunmenu',
  \   'u',
  \   'un',
  \   'una',
  \   'unab',
  \   'unabb',
  \   'unabbr',
  \   'unabbre',
  \   'unabbrev',
  \   'unabbrevi',
  \   'unabbrevia',
  \   'unabbreviat',
  \   'unabbreviate',
  \   'und',
  \   'undo',
  \   'undoj',
  \   'undojo',
  \   'undojoi',
  \   'undojoin',
  \   'undol',
  \   'undoli',
  \   'undolis',
  \   'undolist',
  \   'unh',
  \   'unhi',
  \   'unhid',
  \   'unhide',
  \   'unl',
  \   'unle',
  \   'unlet',
  \   'unlo',
  \   'unloc',
  \   'unlock',
  \   'unlockv',
  \   'unlockva',
  \   'unlockvar',
  \   'unm',
  \   'unma',
  \   'unmap',
  \   'uns',
  \   'unsi',
  \   'unsil',
  \   'unsile',
  \   'unsilen',
  \   'unsilent',
  \   'up',
  \   'upd',
  \   'upda',
  \   'updat',
  \   'update',
  \   'v',
  \   've',
  \   'ver',
  \   'verb',
  \   'verbo',
  \   'verbos',
  \   'verbose',
  \   'vers',
  \   'versi',
  \   'versio',
  \   'version',
  \   'vert',
  \   'verti',
  \   'vertic',
  \   'vertica',
  \   'vertical',
  \   'vi',
  \   'vie',
  \   'view',
  \   'vim',
  \   'vimg',
  \   'vimgr',
  \   'vimgre',
  \   'vimgrep',
  \   'vimgrepa',
  \   'vimgrepad',
  \   'vimgrepadd',
  \   'vis',
  \   'visu',
  \   'visua',
  \   'visual',
  \   'viu',
  \   'vius',
  \   'viusa',
  \   'viusag',
  \   'viusage',
  \   'vm',
  \   'vma',
  \   'vmap',
  \   'vmapc',
  \   'vmapcl',
  \   'vmapcle',
  \   'vmapclea',
  \   'vmapclear',
  \   'vn',
  \   'vne',
  \   'vnew',
  \   'vno',
  \   'vnor',
  \   'vnore',
  \   'vnorem',
  \   'vnorema',
  \   'vnoremap',
  \   'vs',
  \   'vsp',
  \   'vspl',
  \   'vspli',
  \   'vsplit',
  \   'vu',
  \   'vun',
  \   'vunm',
  \   'vunma',
  \   'vunmap',
  \   'w',
  \   'wN',
  \   'wNe',
  \   'wNex',
  \   'wNext',
  \   'wa',
  \   'wal',
  \   'wall',
  \   'wh',
  \   'whi',
  \   'whil',
  \   'while',
  \   'win',
  \   'winc',
  \   'wincm',
  \   'wincmd',
  \   'windo',
  \   'winp',
  \   'winpo',
  \   'winpos',
  \   'wins',
  \   'winsi',
  \   'winsiz',
  \   'winsize',
  \   'wn',
  \   'wne',
  \   'wnex',
  \   'wnext',
  \   'wp',
  \   'wpr',
  \   'wpre',
  \   'wprev',
  \   'wprevi',
  \   'wprevio',
  \   'wpreviou',
  \   'wprevious',
  \   'wq',
  \   'wqa',
  \   'wqal',
  \   'wqall',
  \   'wr',
  \   'wri',
  \   'writ',
  \   'write',
  \   'ws',
  \   'wsv',
  \   'wsve',
  \   'wsver',
  \   'wsverb',
  \   'wundo',
  \   'wv',
  \   'wvi',
  \   'wvim',
  \   'wvimi',
  \   'wvimin',
  \   'wviminf',
  \   'wviminfo',
  \   'x',
  \   'xa',
  \   'xal',
  \   'xall',
  \   'xi',
  \   'xit',
  \   'xm',
  \   'xma',
  \   'xmap',
  \   'xmapc',
  \   'xmapcl',
  \   'xmapcle',
  \   'xmapclea',
  \   'xmapclear',
  \   'xme',
  \   'xmenu',
  \   'xn',
  \   'xno',
  \   'xnor',
  \   'xnore',
  \   'xnorem',
  \   'xnorema',
  \   'xnoremap',
  \   'xnoreme',
  \   'xnoremenu',
  \   'xu',
  \   'xun',
  \   'xunm',
  \   'xunma',
  \   'xunmap',
  \   'xunme',
  \   'xunmenu',
  \   'xwininfo',
  \   'y',
  \   'ya',
  \   'yan',
  \   'yank'
  \ ])

endfunction

let &cpo = s:save_cpo
unlet s:save_cpo
" __END__
" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
